[alias]
  #Notes
  #http://stackoverflow.com/questions/3321492/git-alias-with-positional-parameters

  # list all aliases https://github.com/tj/git-extras/blob/master/bin/git-alias
  # sorting from git-extra breaks with a long alias
  aalias = "!git config --get-regexp 'alias.*' | sed 's/^alias.//' | sed 's/[ ]/ = /';"

  # cleanup files with a type change status
  # http://stackoverflow.com/questions/24533390/git-reset-files-with-typechange-status
  cleanup-typechange = "!git status | grep typechange | awk '{print $2}' | xargs git checkout"

  # View abbreviated SHA, description, and history graph of the latest 20 commits
  l = log --pretty=oneline -n 20 --graph --abbrev-commit

  # additiona list abbreviations http://durdn.com/blog/2012/11/22/must-have-git-aliases-advanced-examples/
  ls = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate -n20 # hash/message/author
  ll = log --pretty=format:"%C(yellow)%h%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --numstat -n5 # shows files changed in each
  la = log --all --pretty=format:'%C(auto,magenta)% G? %C(yellow)%h %C(auto,red)%>(12,trunc)%ad %Cblue%an%Cgreen%d %Creset%s' --date=relative

  # who am i?
  whoami = "!git config --global user.name && git config --global user.email"

  # old diff aka pre diff-so-fancy
  diff-plain = "!git --no-pager diff"

  # View the current working tree status using the short format
  s = status -s

  # Show the diff between the latest commit and the current state
  d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"

  # `git di $number` shows the diff between the state `$number` revisions ago and the current state
  di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"

  # Pull in remote changes for the current repository and all its submodules
  p = !"git pull; git submodule foreach git pull origin master"

  # Clone a repository including all submodules
  c = clone --recursive

  # Commit all changes
  ca = !git add -A && git commit -av

  # Switch to a branch, creating it if necessary
  go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"

  # Show verbose output about tags, branches or remotes
  tags = tag -l
  branches = branch -a
  remotes = remote -v

  # Amend the currently staged files to the latest commit
  amend = commit --amend --reuse-message=HEAD

  # Credit an author on the latest commit
  credit = "!f() { git commit --amend --author \"$1 <$2>\" -C HEAD; }; f"

  # Interactive rebase with the given number of latest commits
  reb = "!r() { git rebase -i HEAD~$1; }; r"

  # Remove the old tag with this name and tag the latest commit with it.
  retag = "!r() { git tag -d $1 && git push origin :refs/tags/$1 && git tag $1; }; r"

  # Find branches containing commit
  fb = "!f() { git branch -a --contains $1; }; f"

  # Find tags containing commit
  ft = "!f() { git describe --always --contains $1; }; f"

  # Find commits by source code
  fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"

  # Find commits by commit message
  fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

  # Remove branches that have already been merged with master
  # a.k.a. ‘delete merged’
  dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"

  # List contributors with number of commits
  contributors = shortlog --summary --numbered

  # Force Pull Repo the rightway (doesn't change untracked) http://stackoverflow.com/a/8888015
  pull-force-master = "!read -p \"This will overwrite tracked files in your repo. Are you sure? (y/n) \" -n 1; \
  echo \"\"; \
  if [[ $REPLY =~ ^[Yy]$ ]]; then \
  git fetch --all && git reset --hard origin/master; \
  fi;"

  # Merge GitHub pull request on top of the current branch or,
  # if a branch name is specified, on top of the specified branch
  mpr = "!f() { \
  declare currentBranch=\"$(git symbolic-ref --short HEAD)\"; \
  declare branch=\"${2:-$currentBranch}\"; \
  if [ $(printf \"%s\" \"$1\" | grep '^[0-9]\\+$' > /dev/null; printf $?) -eq 0 ]; then \
  git fetch origin refs/pull/$1/head:pr/$1 && \
  git checkout -B $branch && \
  git rebase $branch pr/$1 && \
  git checkout -B $branch && \
  git merge pr/$1 && \
  git branch -D pr/$1 && \
  git commit --amend -m \"$(git log -1 --pretty=%B)\n\nCloses #$1.\"; \
  fi \
  }; f"

[apply]

  # Detect whitespace errors when applying a patch
  whitespace = fix

[core]

  # Use custom `.gitignore` and `.gitattributes`
  excludesfile = ~/.gitignore
  #attributesfile = ~/.gitattributes

  # play nice with windows (if windows set to true)
  autocrlf = input

  # Use atom as commit editor if exists else nano see .exports

  # Use diff so fancy as default diff
  pager = diff-so-fancy | less --tabs=4 -RFX

  # Prevent showing files whose names contain non-ASCII symbols as unversioned.
  # http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
  precomposeunicode = false

  # Make `git rebase` safer on macOS
  # More info: <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
  trustctime = false

  # Treat spaces before tabs and all kinds of trailing whitespace as an error
  # [default] trailing-space: looks for spaces at the end of a line
  # [default] space-before-tab: looks for spaces before tabs at the beginning of a line
  whitespace = space-before-tab,-indent-with-non-tab,trailing-space

[color]

  # Use colors in Git commands that are capable of colored output when
  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)
  ui = auto

[color "branch"]

  current = yellow reverse
  local = yellow
  remote = green

[color "diff"]

  meta = yellow bold
  frag = magenta bold # line info
  old = red # deletions
  new = green # additions

[color "status"]

  added = yellow
  changed = green
  untracked = cyan

[diff]

  # Detect copies as well as renames
  renames = copies

[diff "bin"]

  # Use `hexdump` to diff binary files
  textconv = hexdump -v -C

[merge]

  # Include summaries of merged commits in newly created merge commit messages
  log = true

[pull]
  # rebase on pull instead of merge
  rebase = true

[push]
  # simple is the default in git 2+ but lets be explicit
  default = simple
  # Make `git push` push relevant annotated tags when pushing branches out.
  followTags = true

[filter "lfs"]
  clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
  required = true
